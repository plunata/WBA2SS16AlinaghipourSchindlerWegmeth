#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require ('../app');
var debug = require ('debug') ('application:server');
var http = require ('http');
var request = require ('request');
var async = require ('async');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort (process.env.PORT || '3001');
app.set ('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer (app);

var io = require ('socket.io') (server);

app.set ('socketio', io);

io.on ('connection', function (socket) {
    console.log ('a user connected');

    socket.on ("join", function (data) {

        var userId = data;

        request ("http://localhost:3000/user?id=" + userId, function (error, response, body) {
            if (!error && response.statusCode == 200) {

                var user = JSON.parse (body)[0];
                if(!user) return;

                async.map (user.groups, function (url, done) {
                    request (url, function (err, response, body) {

                        if (err || response.statusCode !== 200) {
                            return done (err || new Error ());
                        }

                        return done (null, JSON.parse (body));

                    });
                }, function (err, results) {

                    if (err) return res.sendStatus (500);

                    var groups = results;

                    groups.forEach (function (group) {

                        socket.join (group.id);

                    });

                });
            }
        });

    })

    socket.on ('disconnect', function () {
        console.log ('user disconnected');
    });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen (port);
server.on ('error', onError);
server.on ('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
    var port = parseInt (val, 10);

    if (isNaN (port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error (bind + ' requires elevated privileges');
            process.exit (1);
            break;
        case 'EADDRINUSE':
            console.error (bind + ' is already in use');
            process.exit (1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
    var addr = server.address ();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug ('Listening on ' + bind);
}
